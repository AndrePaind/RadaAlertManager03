/**
 * @file This file defines the core TypeScript types and data structures used throughout the application.
 *
 * @backend-note
 * These types define the contract between the frontend and the backend. The backend API
 * should return data that conforms to these structures. Any changes to the data models
 * on the backend should be reflected here, and vice-versa.
 */

// Represents the severity level of an alert.
export type Severity = "yellow" | "orange" | "red";

// Represents the lifecycle status of an alert.
export type AlertStatus = "draft" | "active" | "expired";

/**
 * Represents a single weather alert.
 * This is the primary data model for the application.
 */
export type Alert = {
  id: string; // Unique identifier for the alert. Should be generated by the backend.
  countryId: string; // The ID of the country this alert belongs to.
  regionIds: string[]; // An array of region IDs affected by this alert.
  severity: Severity; // The severity level of the alert.
  eventType: string; // A short description of the weather event (e.g., "Heavy Rainfall").
  pushDateTime: Date; // The date and time when the alert should be sent to users.
  eventDates: { from: Date; to?: Date }; // The start and optional end date of the weather event.
  justification: string; // The detailed explanation for why the alert is being issued.
  imageUrl?: string; // An optional URL for an image related to the alert (e.g., a forecast map).
  status: AlertStatus; // The current status of the alert.
  author: string; // The name of the person who created/updated the alert. Should come from user session.
  lastUpdated: Date; // Timestamp of the last modification.
  version: number; // A version number, useful for tracking changes.
};

/**
 * Represents a geographical region within a country.
 */
export type Region = {
  id: string; // Unique identifier for the region (e.g., 'bogota').
  name: string; // The display name of the region (e.g., 'Bogot√° D.C.').
  path: string; // SVG path data for rendering the region on the map.
};

/**
 * Represents a country, containing its basic information and a list of its regions.
 */
export type Country = {
  id: string; // Unique identifier for the country (e.g., 'colombia').
  name: string; // The display name of the country.
  regions: Region[]; // An array of Region objects belonging to this country.
};

/**
 * Represents a forecast provider.
 */
export type ForecastProvider = {
  id: string; // Unique identifier for the provider (e.g., 'google').
  name: string; // The display name of the provider (e.g., 'Google Weather').
};

/**
 * Represents the user statistics for a single alert level category.
 */
export type UserStats = {
  green: number; // Number of users in the 'green' (safe) state.
  yellow: number; // Number of users in the 'yellow' (watch) state.
  orange: number; // Number of users in the 'orange' (warning) state.
  red: number; // Number of users in the 'red' (danger) state.
  total: number; // Total number of users.
};

/**
 * Represents the complete statistical data for a given scope (national or regional).
 * It's a dictionary where each key is a provider ID (e.g., 'actual', 'google')
 * and the value is the UserStats for that provider.
 */
export type Stats = {
  [providerId: string]: UserStats;
};
